"use strict";const sendMsgWrap=document.querySelector(".send-msg"),workBtn=document.querySelector(".work__button"),bg=document.querySelector(".popup__bg"),closeBtn=document.querySelector(".close"),sendMsgForm=document.querySelector(".send-msg__form"),sendMsgBtn=document.querySelector(".send-msg__btn"),sendMsgFields=document.querySelectorAll('.send-msg__form input[type="text"]'),sendMsgText=document.querySelector(".send-msg__msg"),successPopup=document.querySelector(".success-popup"),successPopupOkBtn=document.querySelector(".success-popup__btn");class Popup{constructor(e,s,t){this.popup=e,this.bg=s,this.btn=t,this.show.bind(this)}show(){this.popup.classList.add("active"),this.bg.classList.add("active"),document.body.style.overflow="hidden"}close(){sendMsgForm.reset();const e=document.querySelector("._err");e&&e.remove();const s=document.querySelector("._success");s&&s.remove(),sendMsgText.classList.remove("_req");for(let e=0;e<sendMsgFields.length;e++)sendMsgFields[e].classList.remove("_req");this.popup.classList.remove("active"),this.bg.classList.remove("active"),document.body.style.overflow="auto"}}class PopupSuccess extends Popup{constructor(e,s,t){super(e,s,t),this.btn.addEventListener("click",super.close.bind(this))}}class FormSend{constructor(e,s,t,i){this.form=e,this.submit=s,this.fields=t,this.text=i,this.form.addEventListener("submit",e=>{e.preventDefault();const s=new FormValidate(this.fields,this.text);s.validate()&&(this.send(),sendMsgPopup.close(),setTimeout(()=>{successMsg.show()},500))})}async send(){let s={};for(let e=0;e<this.fields.length;e++){var t=this.fields[e];s[t.id]=t.value}s[this.text.id]=this.text.value,(await fetch("send-mail.php",{method:"POST",body:JSON.stringify(s),headers:{Accept:"application/json, text/plain, */*","Content-Type":"application/json"}})).ok&&(this.success(),this.form.reset())}}class FormValidate{constructor(e,s){this.fields=e,this.text=s}validate(e,s){const t=document.querySelector("._err");t&&t.remove(),this.text.classList.remove("_req");for(let e=0;e<this.fields.length;e++)this.fields[e].classList.remove("_req");let i="";for(let e=0;e<this.fields.length;e++)""===this.fields[e].value.trim()&&(this.fields[e].classList.add("_req"),i="fieldsErr"),"email"===this.fields[e].id&&(this.validateEmail(this.fields[e].value.trim())||(this.fields[e].classList.add("_req"),i="emailErr"));return""===this.text.value.trim()&&(this.text.classList.add("_req"),i="fieldsErr"),!i||("fieldsErr"===i?this.err("fieldsErr"):"emailErr"===i&&this.err("emailErr"),!1)}err(e){if("emailErr"===e){const s=document.createElement("div");s.classList.add("_err"),s.innerHTML="Please enter valid Email",sendMsgForm.append(s)}else if("fieldsErr"===e){const t=document.createElement("div");t.classList.add("_err"),t.innerHTML="Please fill in all the required fields.",sendMsgForm.append(t)}}validateEmail(e){return/^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i.test(e)}}const sendMsgPopup=new Popup(sendMsgWrap,bg,workBtn);workBtn.addEventListener("click",sendMsgPopup.show.bind(sendMsgPopup)),bg.addEventListener("click",function(e){(e.target.classList.contains("send-msg")||e.target.classList.contains("success-popup"))&&(sendMsgPopup.close(),successMsg.close())}),closeBtn.addEventListener("click",sendMsgPopup.close.bind(sendMsgPopup));const sendMsg=new FormSend(sendMsgForm,sendMsgBtn,sendMsgFields,sendMsgText),successMsg=new PopupSuccess(successPopup,bg,successPopupOkBtn);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
